name: Python App on Azure Kubernetes Service

on:
    workflow_dispatch:
      inputs:
        APPLY:
          type: choice
          options:
            - 'yes'
            - 'no'
          required: true
        BUILD:
          type: choice
          options:
            - 'yes'
            - 'no'
          required: false
        DEPLOY:
          type: choice
          options:
            - 'yes'
            - 'no'
          required: false
        DESTROY:
          type: choice
          options:
            - 'yes'
            - 'no'
          required: false
    push:
        branches: [ main ]
        paths-ignore: 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
    terraform_infrastructure:
        runs-on: ubuntu-latest
        outputs:
          kubelet: ${{ steps.terraform.outputs.USER_ASSIGNED_IDENTITY_ID }}
        if: ${{ github.event.inputs.APPLY == 'yes' }}
        steps:
            - name: Repository Checkout
              uses: actions/checkout@v4
            - name: Azure Login
              uses: azure/login@v2
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            - name: Parse Azure Credentials
              id: parse_creds
              run: |
                echo "client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
                echo "client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
                echo "tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
                echo "subscription_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
            - name: Setup terraform
              uses: hashicorp/setup-terraform@v3
            - name: Terraform Init & Plan
              run: |
                terraform init -backend-config="client_id=${{ env.client_id }}" \
                               -backend-config="client_secret=${{ env.client_secret }}" \
                               -backend-config="tenant_id=${{ env.tenant_id }}" \
                               -backend-config="subscription_id=${{ env.subscription_id }}"
                terraform plan -out infraplan
              working-directory: tercluster/
            - name: Teraform Apply
              id: terraform
              run: |
                terraform apply infraplan
                echo "USER_ASSIGNED_IDENTITY_ID=$(terraform state show 'module.clusters.azurerm_kubernetes_cluster.aks["my-aks"]' | grep -A 2 'kubelet_identity' | grep client_id | awk '{ print $3 }' | tr -d '"')" >> $GITHUB_OUTPUT
              working-directory: tercluster/
    docker_stage:
      runs-on: [self-hosted, linux]
      needs: terraform_infrastructure
      if: ${{ github.event.inputs.BUILD == 'yes' }}
      steps:
            - name: Repo Checkout
              uses: actions/checkout@v4
            - name: Login to Azure
              uses: azure/login@v2
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            - name: Sonar Scan
              uses: SonarSource/sonarcloud-github-action@master
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                args: >
                  -Dsonar.projectKey=rigamortus_infiniongt
                  -Dsonar.organization=rigamortus
                  -Dsonar.host.url=https://sonarcloud.io
            - name: Login to ACR
              run: |
                az acr login -n rigamoracr
            - name: Build Image for Testing
              run: |
                docker build -t flaskapp:v1 .
              working-directory: ./msdocs-python-django-webapp-quickstart
            - name: Run Snyk Test
              uses: snyk/actions/docker@master
              env:
                SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                image: docker.io/flaskapp:v1
                args: --file=./msdocs-python-django-webapp-quickstart/Dockerfile
              continue-on-error: true
            - name: Build and Push
              uses: docker/build-push-action@v6
              with:
                context: ./msdocs-python-django-webapp-quickstart 
                push: true
                tags: rigamoracr.azurecr.io/flaskapp:latest
    kubernetes_deploy:
      runs-on: [linux, self-hosted]
      needs: [terraform_infrastructure, docker_stage]
      if: ${{ github.event.inputs.DEPLOY == 'yes' }}
      permissions:
        id-token: write
        contents: read
        actions: read
        issues: write
      steps:
        - name: Repo Checkout
          uses: actions/checkout@v4
        - name: Login to Azure
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        - name: Set AKS Context
          uses: azure/aks-set-context@v3
          with:
            resource-group: 'myrg'
            cluster-name: 'my-aks'
        - name: Create Vault Secret
          run: |
            az keyvault network-rule add --name myrigamortuskeyvault  --ip-address 20.82.144.6
            az keyvault secret set --name SECRET-KEY --vault-name ${{ vars.KEYVAULT_NAME }} --value ${{ secrets.VAULT }}
            echo "TENANT_ID=$(az account show --query "tenantId" -o tsv)" >> $GITHUB_ENV
        - name: Get DNS & IP Records
          run: |
            acrip1=$(az network private-endpoint show --name myacrendpoint --resource-group myrg --query "customDnsConfigs[0].ipAddresses" -o tsv)
            acrip2=$(az network private-endpoint show --name myacrendpoint --resource-group myrg --query "customDnsConfigs[1].ipAddresses" -o tsv)
            kvip=$(az network private-endpoint show --name mykvendpoint --resource-group myrg --query "customDnsConfigs[0].ipAddresses" -o tsv)
            kvdns=$(az network private-endpoint show --name mykvendpoint --resource-group myrg --query "customDnsConfigs[].fqdn" -o tsv)
            acrdns1=$(az network private-endpoint show --name myacrendpoint --resource-group myrg --query "customDnsConfigs[0].fqdn" -o tsv)
            acrdns2=$(az network private-endpoint show --name myacrendpoint --resource-group myrg --query "customDnsConfigs[1].fqdn" -o tsv)
            az network private-dns zone create -g myrg -n $acrdns1
            az network private-dns zone wait --created -g myrg -n $acrdns1
            az network private-dns zone create -g myrg -n $acrdns2
            az network private-dns zone wait --created -g myrg -n $acrdns2
            az network private-dns zone create -g myrg -n $kvdns
            az network private-dns zone wait --created -g myrg -n $kvdns
            az network private-dns record-set a add-record -g myrg -z $acrdns1 -n "@" -a $acrip1
            az network private-dns record-set a add-record -g myrg -z $acrdns2 -n "@" -a $acrip2
            az network private-dns record-set a add-record -g myrg -z $kvdns -n "@" -a $kvip
            az network private-dns link vnet create -g myrg -n acrone -z $acrdns1 -v my-vnet -e False
            az network private-dns link vnet create -g myrg -n acrtwo -z $acrdns2 -v my-vnet -e False
            az network private-dns link vnet create -g myrg -n kvone -z $kvdns -v my-vnet -e False
        # kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.16.1/cert-manager.yaml --validate=false
        - name: Deployment
          run: |
            az aks addon enable -n my-aks -g myrg --addon ingress-appgw --appgw-subnet-cidr 10.0.3.0/24
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.16.1/cert-manager.yaml --validate=false
            for file in /home/azureuser/actions-runner/_work/infiniongt/infiniongt/manifests/*.yml; do
              if [[ "$(basename "$file")" != "certificate.yml" ]] && [[ "$(basename "$file")" != "issuer.yml" ]]; then
                sed -i "s|KEYVAULT_NAME|${{ vars.KEYVAULT_NAME }}|g" "$file"
                sed -i "s|kubelet|${{ needs.terraform_infrastructure.outputs.kubelet }}|g" "$file"
                sed -i "s|TENANT_ID|${{ env.TENANT_ID }}|g" "$file"
                kubectl apply -f "$file" --validate=false
              fi
            done
          env:
            KEYVAULT_NAME: ${{ vars.KEYVAULT_NAME }}
            USER_ASSIGNED_IDENTITY_ID: ${{ needs.terraform_infrastructure.outputs.kubelet }}
            TENANT_ID: ${{ env.TENANT_ID }}
        - name: Apply Cerftificate & Issuer
          run: |
            kubectl apply -f /home/azureuser/actions-runner/_work/infiniongt/infiniongt/manifests/certificate.yml
        - name: Prometheus Helm
          run: |
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update
            helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
            kubectl --namespace monitoring get pods -l "release=prometheus"
    terraform_destroy:
      runs-on: ubuntu-latest
      if: ${{ github.event.inputs.DESTROY == 'yes' }}
      steps:
        - name: Repository Checkout
          uses: actions/checkout@v4
        - name: Azure Login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        - name: Parse Azure Credentials
          id: parse_creds
          run: |
            echo "client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
            echo "client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
            echo "tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
            echo "subscription_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
        - name: Setup terraform
          uses: hashicorp/setup-terraform@v3
        - name: Terraform Init & Destroy Plan
          run: |
            terraform init -backend-config="client_id=${{ env.client_id }}" \
                          -backend-config="client_secret=${{ env.client_secret }}" \
                          -backend-config="tenant_id=${{ env.tenant_id }}" \
                          -backend-config="subscription_id=${{ env.subscription_id }}"
            terraform plan -destroy -out destroyplan
          working-directory: tercluster/
        - name: Teraform Apply
          run: terraform apply destroyplan
          working-directory: tercluster/